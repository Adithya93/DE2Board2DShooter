// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/21/2016 19:17:39"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          VGAWrapper
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module VGAWrapper_vlg_vec_tst();
// constants                                           
// general purpose registers
reg IRDA_RXD;
reg [9:0] bulletXPosition;
reg [8:0] bulletYPosition;
reg [9:0] enemyXPosition;
reg [8:0] enemyYPosition;
reg master_clk;
reg [9:0] playerXPosition;
reg [8:0] playerYPosition;
reg resetn;
reg start;
// wires                                               
wire DAC_clk;
wire [7:0] VGA_B;
wire [7:0] VGA_G;
wire [7:0] VGA_R;
wire VGA_hSync;
wire VGA_vSync;
wire blank_n;
wire left;
wire processor_clock;
wire right;
wire shoot;
wire stop;

// assign statements (if any)                          
VGAWrapper i1 (
// port map - connection between master ports and signals/registers   
	.DAC_clk(DAC_clk),
	.IRDA_RXD(IRDA_RXD),
	.VGA_B(VGA_B),
	.VGA_G(VGA_G),
	.VGA_R(VGA_R),
	.VGA_hSync(VGA_hSync),
	.VGA_vSync(VGA_vSync),
	.blank_n(blank_n),
	.bulletXPosition(bulletXPosition),
	.bulletYPosition(bulletYPosition),
	.enemyXPosition(enemyXPosition),
	.enemyYPosition(enemyYPosition),
	.left(left),
	.master_clk(master_clk),
	.playerXPosition(playerXPosition),
	.playerYPosition(playerYPosition),
	.processor_clock(processor_clock),
	.resetn(resetn),
	.right(right),
	.shoot(shoot),
	.start(start),
	.stop(stop)
);
initial 
begin 
#1000000 $finish;
end 

// IRDA_RXD
initial
begin
	IRDA_RXD = 1'b0;
	IRDA_RXD = #50000 1'b1;
	IRDA_RXD = #70000 1'b0;
end 
// bulletXPosition[ 9 ]
initial
begin
	bulletXPosition[9] = 1'b0;
end 
// bulletXPosition[ 8 ]
initial
begin
	bulletXPosition[8] = 1'b0;
end 
// bulletXPosition[ 7 ]
initial
begin
	bulletXPosition[7] = 1'b0;
end 
// bulletXPosition[ 6 ]
initial
begin
	bulletXPosition[6] = 1'b0;
end 
// bulletXPosition[ 5 ]
initial
begin
	bulletXPosition[5] = 1'b0;
end 
// bulletXPosition[ 4 ]
initial
begin
	bulletXPosition[4] = 1'b0;
end 
// bulletXPosition[ 3 ]
initial
begin
	bulletXPosition[3] = 1'b0;
end 
// bulletXPosition[ 2 ]
initial
begin
	bulletXPosition[2] = 1'b0;
end 
// bulletXPosition[ 1 ]
initial
begin
	bulletXPosition[1] = 1'b0;
end 
// bulletXPosition[ 0 ]
initial
begin
	bulletXPosition[0] = 1'b0;
end 
// bulletYPosition[ 8 ]
initial
begin
	bulletYPosition[8] = 1'b0;
end 
// bulletYPosition[ 7 ]
initial
begin
	bulletYPosition[7] = 1'b0;
end 
// bulletYPosition[ 6 ]
initial
begin
	bulletYPosition[6] = 1'b0;
end 
// bulletYPosition[ 5 ]
initial
begin
	bulletYPosition[5] = 1'b0;
end 
// bulletYPosition[ 4 ]
initial
begin
	bulletYPosition[4] = 1'b0;
end 
// bulletYPosition[ 3 ]
initial
begin
	bulletYPosition[3] = 1'b0;
end 
// bulletYPosition[ 2 ]
initial
begin
	bulletYPosition[2] = 1'b0;
end 
// bulletYPosition[ 1 ]
initial
begin
	bulletYPosition[1] = 1'b0;
end 
// bulletYPosition[ 0 ]
initial
begin
	bulletYPosition[0] = 1'b0;
end 
// enemyXPosition[ 9 ]
initial
begin
	enemyXPosition[9] = 1'b0;
end 
// enemyXPosition[ 8 ]
initial
begin
	enemyXPosition[8] = 1'b0;
end 
// enemyXPosition[ 7 ]
initial
begin
	enemyXPosition[7] = 1'b0;
end 
// enemyXPosition[ 6 ]
initial
begin
	enemyXPosition[6] = 1'b0;
end 
// enemyXPosition[ 5 ]
initial
begin
	enemyXPosition[5] = 1'b0;
end 
// enemyXPosition[ 4 ]
initial
begin
	enemyXPosition[4] = 1'b0;
end 
// enemyXPosition[ 3 ]
initial
begin
	enemyXPosition[3] = 1'b0;
end 
// enemyXPosition[ 2 ]
initial
begin
	enemyXPosition[2] = 1'b0;
end 
// enemyXPosition[ 1 ]
initial
begin
	enemyXPosition[1] = 1'b0;
end 
// enemyXPosition[ 0 ]
initial
begin
	enemyXPosition[0] = 1'b0;
end 
// enemyYPosition[ 8 ]
initial
begin
	enemyYPosition[8] = 1'b0;
end 
// enemyYPosition[ 7 ]
initial
begin
	enemyYPosition[7] = 1'b0;
end 
// enemyYPosition[ 6 ]
initial
begin
	enemyYPosition[6] = 1'b0;
end 
// enemyYPosition[ 5 ]
initial
begin
	enemyYPosition[5] = 1'b0;
end 
// enemyYPosition[ 4 ]
initial
begin
	enemyYPosition[4] = 1'b0;
end 
// enemyYPosition[ 3 ]
initial
begin
	enemyYPosition[3] = 1'b0;
end 
// enemyYPosition[ 2 ]
initial
begin
	enemyYPosition[2] = 1'b0;
end 
// enemyYPosition[ 1 ]
initial
begin
	enemyYPosition[1] = 1'b0;
end 
// enemyYPosition[ 0 ]
initial
begin
	enemyYPosition[0] = 1'b0;
end 

// master_clk
always
begin
	master_clk = 1'b0;
	master_clk = #10000 1'b1;
	#10000;
end 
// playerXPosition[ 9 ]
initial
begin
	playerXPosition[9] = 1'b0;
end 
// playerXPosition[ 8 ]
initial
begin
	playerXPosition[8] = 1'b0;
end 
// playerXPosition[ 7 ]
initial
begin
	playerXPosition[7] = 1'b0;
end 
// playerXPosition[ 6 ]
initial
begin
	playerXPosition[6] = 1'b0;
end 
// playerXPosition[ 5 ]
initial
begin
	playerXPosition[5] = 1'b0;
end 
// playerXPosition[ 4 ]
initial
begin
	playerXPosition[4] = 1'b0;
end 
// playerXPosition[ 3 ]
initial
begin
	playerXPosition[3] = 1'b0;
end 
// playerXPosition[ 2 ]
initial
begin
	playerXPosition[2] = 1'b0;
end 
// playerXPosition[ 1 ]
initial
begin
	playerXPosition[1] = 1'b0;
end 
// playerXPosition[ 0 ]
initial
begin
	playerXPosition[0] = 1'b0;
end 
// playerYPosition[ 8 ]
initial
begin
	playerYPosition[8] = 1'b0;
end 
// playerYPosition[ 7 ]
initial
begin
	playerYPosition[7] = 1'b0;
end 
// playerYPosition[ 6 ]
initial
begin
	playerYPosition[6] = 1'b0;
end 
// playerYPosition[ 5 ]
initial
begin
	playerYPosition[5] = 1'b0;
end 
// playerYPosition[ 4 ]
initial
begin
	playerYPosition[4] = 1'b0;
end 
// playerYPosition[ 3 ]
initial
begin
	playerYPosition[3] = 1'b0;
end 
// playerYPosition[ 2 ]
initial
begin
	playerYPosition[2] = 1'b0;
end 
// playerYPosition[ 1 ]
initial
begin
	playerYPosition[1] = 1'b0;
end 
// playerYPosition[ 0 ]
initial
begin
	playerYPosition[0] = 1'b0;
end 

// start
initial
begin
	start = 1'b0;
end 

// resetn
initial
begin
	resetn = 1'b1;
end 
endmodule

