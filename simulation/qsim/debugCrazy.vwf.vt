// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/23/2016 03:04:10"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          processor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg INreset;
reg inclock;
reg left;
reg ps2_key_pressed;
reg [7:0] ps2_out;
reg right;
reg shoot;
reg stop;
// wires                                               
wire [1:0] ALUIn2Bypass;
wire [31:0] ALUInput1;
wire [31:0] ALUInput2;
wire [31:0] ALUOutput;
wire [4:0] MWOp;
wire [4:0] RD;
wire [4:0] RS2;
wire [31:0] RS2Val;
wire RegWE;
wire [2:0] RegWriteDSel;
wire [31:0] RegWriteData;
wire bulletSpeed;
wire bulletSpeed2;
wire bulletSpeed3;
wire [9:0] bulletXPosition;
wire [8:0] bulletYPosition;
wire [31:0] chosenALUInB;
wire [11:0] debug_addr;
wire [31:0] debug_data;
wire [9:0] enemyXPosition;
wire [8:0] enemyYPosition;
wire gotShootSignal;
wire [31:0] lcd_data;
wire lcd_write;
wire [7:0] leds;
wire lessThan;
wire multRDY;
wire outclock;
wire [9:0] playerXPosition;
wire [8:0] playerYPosition;
wire readingBulletX;
wire readingBulletY;
wire readingPos;
wire regFileInput;
wire sanityCheck;
wire sanityCheck2;
wire shootData;
wire shouldBranch;
wire [31:0] speedData;
wire [4:0] testPC;

// assign statements (if any)                          
processor i1 (
// port map - connection between master ports and signals/registers   
	.ALUIn2Bypass(ALUIn2Bypass),
	.ALUInput1(ALUInput1),
	.ALUInput2(ALUInput2),
	.ALUOutput(ALUOutput),
	.INreset(INreset),
	.MWOp(MWOp),
	.RD(RD),
	.RS2(RS2),
	.RS2Val(RS2Val),
	.RegWE(RegWE),
	.RegWriteDSel(RegWriteDSel),
	.RegWriteData(RegWriteData),
	.bulletSpeed(bulletSpeed),
	.bulletSpeed2(bulletSpeed2),
	.bulletSpeed3(bulletSpeed3),
	.bulletXPosition(bulletXPosition),
	.bulletYPosition(bulletYPosition),
	.chosenALUInB(chosenALUInB),
	.debug_addr(debug_addr),
	.debug_data(debug_data),
	.enemyXPosition(enemyXPosition),
	.enemyYPosition(enemyYPosition),
	.gotShootSignal(gotShootSignal),
	.inclock(inclock),
	.lcd_data(lcd_data),
	.lcd_write(lcd_write),
	.leds(leds),
	.left(left),
	.lessThan(lessThan),
	.multRDY(multRDY),
	.outclock(outclock),
	.playerXPosition(playerXPosition),
	.playerYPosition(playerYPosition),
	.ps2_key_pressed(ps2_key_pressed),
	.ps2_out(ps2_out),
	.readingBulletX(readingBulletX),
	.readingBulletY(readingBulletY),
	.readingPos(readingPos),
	.regFileInput(regFileInput),
	.right(right),
	.sanityCheck(sanityCheck),
	.sanityCheck2(sanityCheck2),
	.shoot(shoot),
	.shootData(shootData),
	.shouldBranch(shouldBranch),
	.speedData(speedData),
	.stop(stop),
	.testPC(testPC)
);
initial 
begin 
#6000000 $finish;
end 

// INreset
initial
begin
	INreset = 1'b0;
end 

// inclock
always
begin
	inclock = 1'b0;
	inclock = #20000 1'b1;
	#20000;
end 

// left
initial
begin
	left = 1'b0;
end 

// ps2_key_pressed
initial
begin
	ps2_key_pressed = 1'b0;
end 
// ps2_out[ 7 ]
initial
begin
	ps2_out[7] = 1'b0;
end 
// ps2_out[ 6 ]
initial
begin
	ps2_out[6] = 1'b0;
end 
// ps2_out[ 5 ]
initial
begin
	ps2_out[5] = 1'b0;
end 
// ps2_out[ 4 ]
initial
begin
	ps2_out[4] = 1'b0;
end 
// ps2_out[ 3 ]
initial
begin
	ps2_out[3] = 1'b0;
end 
// ps2_out[ 2 ]
initial
begin
	ps2_out[2] = 1'b0;
end 
// ps2_out[ 1 ]
initial
begin
	ps2_out[1] = 1'b0;
end 
// ps2_out[ 0 ]
initial
begin
	ps2_out[0] = 1'b0;
end 

// right
initial
begin
	right = 1'b0;
end 

// shoot
initial
begin
	shoot = 1'b0;
	shoot = #2560000 1'b1;
	shoot = #120000 1'b0;
end 

// stop
initial
begin
	stop = 1'b0;
end 
endmodule

