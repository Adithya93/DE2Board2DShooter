// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/22/2016 17:08:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          skeleton
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module skeleton_vlg_vec_tst();
// constants                                           
// general purpose registers
reg IRDA_RXD;
reg master_clk;
reg resetn;
reg start;
// wires                                               
wire DAC_clk;
wire [2:0] RegWriteDSel;
wire [31:0] RegWriteData;
wire [7:0] VGA_B;
wire [7:0] VGA_G;
wire [7:0] VGA_R;
wire VGA_hSync;
wire VGA_vSync;
wire blank_n;
wire bulletSpeed;
wire bulletSpeed2;
wire bulletSpeed3;
wire [9:0] bulletXPosition;
wire [8:0] bulletYPosition;
wire [11:0] debug_addr;
wire [31:0] debug_word;
wire gotShootSignal;
wire lcd_blon;
wire [7:0] lcd_data;
wire lcd_en;
wire lcd_on;
wire lcd_rs;
wire lcd_rw;
wire [7:0] leds;
wire left;
wire outclock;
wire [9:0] playerXPosition;
wire processor_clock;
wire readingBulletX;
wire readingBulletY;
wire readingPos;
wire right;
wire [6:0] seg1;
wire [6:0] seg2;
wire [6:0] seg3;
wire [6:0] seg4;
wire [6:0] seg5;
wire [6:0] seg6;
wire [6:0] seg7;
wire [6:0] seg8;
wire shoot;
wire shootData;
wire [31:0] speedData;
wire stop;
wire [4:0] testPC;

// assign statements (if any)                          
skeleton i1 (
// port map - connection between master ports and signals/registers   
	.DAC_clk(DAC_clk),
	.IRDA_RXD(IRDA_RXD),
	.RegWriteDSel(RegWriteDSel),
	.RegWriteData(RegWriteData),
	.VGA_B(VGA_B),
	.VGA_G(VGA_G),
	.VGA_R(VGA_R),
	.VGA_hSync(VGA_hSync),
	.VGA_vSync(VGA_vSync),
	.blank_n(blank_n),
	.bulletSpeed(bulletSpeed),
	.bulletSpeed2(bulletSpeed2),
	.bulletSpeed3(bulletSpeed3),
	.bulletXPosition(bulletXPosition),
	.bulletYPosition(bulletYPosition),
	.debug_addr(debug_addr),
	.debug_word(debug_word),
	.gotShootSignal(gotShootSignal),
	.lcd_blon(lcd_blon),
	.lcd_data(lcd_data),
	.lcd_en(lcd_en),
	.lcd_on(lcd_on),
	.lcd_rs(lcd_rs),
	.lcd_rw(lcd_rw),
	.leds(leds),
	.left(left),
	.master_clk(master_clk),
	.outclock(outclock),
	.playerXPosition(playerXPosition),
	.processor_clock(processor_clock),
	.readingBulletX(readingBulletX),
	.readingBulletY(readingBulletY),
	.readingPos(readingPos),
	.resetn(resetn),
	.right(right),
	.seg1(seg1),
	.seg2(seg2),
	.seg3(seg3),
	.seg4(seg4),
	.seg5(seg5),
	.seg6(seg6),
	.seg7(seg7),
	.seg8(seg8),
	.shoot(shoot),
	.shootData(shootData),
	.speedData(speedData),
	.start(start),
	.stop(stop),
	.testPC(testPC)
);
initial 
begin 
#15000000 $finish;
end 
endmodule

