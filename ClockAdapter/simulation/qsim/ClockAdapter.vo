// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 15.1.0 Build 185 10/21/2015 SJ Lite Edition"

// DATE "04/19/2016 13:56:55"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module ClockAdapter (
	processor_clk,
	update_clk,
	reset,
	must_update);
input 	processor_clk;
input 	update_clk;
input 	reset;
output 	must_update;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \must_update~output_o ;
wire \processor_clk~input_o ;
wire \update_clk~input_o ;
wire \nextUpdate~combout ;
wire \reset~input_o ;
wire \catchUpdate|q~q ;


cyclonev_io_obuf \must_update~output (
	.i(\catchUpdate|q~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\must_update~output_o ),
	.obar());
// synopsys translate_off
defparam \must_update~output .bus_hold = "false";
defparam \must_update~output .open_drain_output = "false";
defparam \must_update~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \processor_clk~input (
	.i(processor_clk),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\processor_clk~input_o ));
// synopsys translate_off
defparam \processor_clk~input .bus_hold = "false";
defparam \processor_clk~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \update_clk~input (
	.i(update_clk),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\update_clk~input_o ));
// synopsys translate_off
defparam \update_clk~input .bus_hold = "false";
defparam \update_clk~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb nextUpdate(
// Equation(s):
// \nextUpdate~combout  = (!\catchUpdate|q~q  & \update_clk~input_o )

	.dataa(!\catchUpdate|q~q ),
	.datab(!\update_clk~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\nextUpdate~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam nextUpdate.extended_lut = "off";
defparam nextUpdate.lut_mask = 64'h2222222222222222;
defparam nextUpdate.shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \reset~input (
	.i(reset),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\reset~input_o ));
// synopsys translate_off
defparam \reset~input .bus_hold = "false";
defparam \reset~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \catchUpdate|q (
	.clk(\processor_clk~input_o ),
	.d(\nextUpdate~combout ),
	.asdata(vcc),
	.clrn(\reset~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\catchUpdate|q~q ),
	.prn(vcc));
// synopsys translate_off
defparam \catchUpdate|q .is_wysiwyg = "true";
defparam \catchUpdate|q .power_up = "low";
// synopsys translate_on

assign must_update = \must_update~output_o ;

endmodule
